/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * This class implements enables .h5 (HDF5, https://www.hdfgroup.org/) files to <br>
 * be written. The .h5 format is a binary file that can store large amounts of <br>
 * data in a compressed file size and can be more quickly written and read than<br>
 * text file formats such as .sto or .mot. The file has a hierarchical structure<br>
 * of groups (like a folder directory structure) than can contain subgroups, <br>
 * datasets, and metadata describing the datasets. <br>
 * <br>
 * <br>
 * <br>
 * @author Colin Smith
 */
public class H5FileAdapter extends FileAdapter {
  private transient long swigCPtr;
  private transient boolean swigCMemOwnDerived;

  protected H5FileAdapter(long cPtr, boolean cMemoryOwn) {
    super(opensimJAMJNI.H5FileAdapter_SWIGSmartPtrUpcast(cPtr), true);
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(H5FileAdapter obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void swigSetCMemOwn(boolean own) {
    swigCMemOwnDerived = own;
    super.swigSetCMemOwn(own);
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwnDerived) {
        swigCMemOwnDerived = false;
        opensimJAMJNI.delete_H5FileAdapter(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public H5FileAdapter() {
    this(opensimJAMJNI.new_H5FileAdapter__SWIG_0(), true);
  }

  public H5FileAdapter(H5FileAdapter arg0) {
    this(opensimJAMJNI.new_H5FileAdapter__SWIG_1(H5FileAdapter.getCPtr(arg0), arg0), true);
  }

  public DataAdapter clone() {
    long cPtr = opensimJAMJNI.H5FileAdapter_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new H5FileAdapter(cPtr, true);
  }

  public void open(String file_name) {
    opensimJAMJNI.H5FileAdapter_open(swigCPtr, this, file_name);
  }

  public void close() {
    opensimJAMJNI.H5FileAdapter_close(swigCPtr, this);
  }

  public void createGroup(String new_group) {
    opensimJAMJNI.H5FileAdapter_createGroup(swigCPtr, this, new_group);
  }

  public void writeDataSet(TimeSeriesTable table, String group_path) {
    opensimJAMJNI.H5FileAdapter_writeDataSet(swigCPtr, this, TimeSeriesTable.getCPtr(table), table, group_path);
  }

  public void writeDataSet2(TimeSeriesTable table, String group_path) {
    opensimJAMJNI.H5FileAdapter_writeDataSet2(swigCPtr, this, TimeSeriesTable.getCPtr(table), table, group_path);
  }

  public void writeDataSetVec3(TimeSeriesTableVec3 table, String group_path) {
    opensimJAMJNI.H5FileAdapter_writeDataSetVec3(swigCPtr, this, TimeSeriesTableVec3.getCPtr(table), table, group_path);
  }

  public void writeDataSetVector(TimeSeriesTable table, String group_path) {
    opensimJAMJNI.H5FileAdapter_writeDataSetVector(swigCPtr, this, TimeSeriesTable.getCPtr(table), table, group_path);
  }

  public void writeDataSetSimTKVector(Vector data_vector, String dataset_path) {
    opensimJAMJNI.H5FileAdapter_writeDataSetSimTKVector(swigCPtr, this, Vector.getCPtr(data_vector), data_vector, dataset_path);
  }

  public void writeDataSetSimTKVectorVec3(VectorVec3 data_vector, String dataset_path) {
    opensimJAMJNI.H5FileAdapter_writeDataSetSimTKVectorVec3(swigCPtr, this, VectorVec3.getCPtr(data_vector), data_vector, dataset_path);
  }

  public void writeDataSetSimTKMatrix(Matrix data_matrix, String dataset_path) {
    opensimJAMJNI.H5FileAdapter_writeDataSetSimTKMatrix(swigCPtr, this, Matrix.getCPtr(data_matrix), data_matrix, dataset_path);
  }

  public void writeDataSetSimTKMatrixColumns(Matrix data, StdVectorString column_dataset_paths) {
    opensimJAMJNI.H5FileAdapter_writeDataSetSimTKMatrixColumns(swigCPtr, this, Matrix.getCPtr(data), data, StdVectorString.getCPtr(column_dataset_paths), column_dataset_paths);
  }

  public void writeDataSetSimTKMatrixVec3Columns(MatrixVec3 data, StdVectorString column_dataset_paths) {
    opensimJAMJNI.H5FileAdapter_writeDataSetSimTKMatrixVec3Columns(swigCPtr, this, MatrixVec3.getCPtr(data), data, StdVectorString.getCPtr(column_dataset_paths), column_dataset_paths);
  }

  public void writeTimeDataSet(ArrayDouble time) {
    opensimJAMJNI.H5FileAdapter_writeTimeDataSet(swigCPtr, this, ArrayDouble.getCPtr(time), time);
  }

  public void writeStatesDataSet(TimeSeriesTable table) {
    opensimJAMJNI.H5FileAdapter_writeStatesDataSet(swigCPtr, this, TimeSeriesTable.getCPtr(table), table);
  }

  public void writeComponentGroupDataSet(String group_name, StdVectorString names, StdVectorString output_double_names, StdVectorMatrix output_double_values) {
    opensimJAMJNI.H5FileAdapter_writeComponentGroupDataSet(swigCPtr, this, group_name, StdVectorString.getCPtr(names), names, StdVectorString.getCPtr(output_double_names), output_double_names, StdVectorMatrix.getCPtr(output_double_values), output_double_values);
  }

  public void writeComponentGroupDataSetVec3(String group_name, StdVectorString names, StdVectorString output_vec3_names, SWIGTYPE_p_std__vectorT_SimTK__Matrix_T_SimTK__Vec3_t_t output_vec3_values) {
    opensimJAMJNI.H5FileAdapter_writeComponentGroupDataSetVec3(swigCPtr, this, group_name, StdVectorString.getCPtr(names), names, StdVectorString.getCPtr(output_vec3_names), output_vec3_names, SWIGTYPE_p_std__vectorT_SimTK__Matrix_T_SimTK__Vec3_t_t.getCPtr(output_vec3_values));
  }

  public void writeComponentGroupDataSetVector(String group_name, StdVectorString names, StdVectorString output_vector_names, SWIGTYPE_p_std__vectorT_std__vectorT_SimTK__Matrix_T_double_t_t_t output_vector_values) {
    opensimJAMJNI.H5FileAdapter_writeComponentGroupDataSetVector(swigCPtr, this, group_name, StdVectorString.getCPtr(names), names, StdVectorString.getCPtr(output_vector_names), output_vector_names, SWIGTYPE_p_std__vectorT_std__vectorT_SimTK__Matrix_T_double_t_t_t.getCPtr(output_vector_values));
  }

}
