/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * This component is used to represent the articular surfaces<br>
 * in the Smith2018ArticularContactForce component. The Smith2018ContactMesh reads<br>
 * in a triangle mesh from the mesh_file property (.stl, .vtp, .obj) that <br>
 * represents only the contact surface. This component can only be used with the <br>
 * Smith2018ArticularContactForce component to be in contact with another <br>
 * Smith2018ContactMesh.<br>
 * <br>
 * # Mesh Requirements<br>
 * The mesh does not need to be closed (ie water tight) <br>
 * and a smaller number of triangles in the mesh will lead to faster <br>
 * collision detection performance. The normal vectors of the mesh should be <br>
 * pointing outwards from the articular surface towards the opposing contact <br>
 * mesh. Misdirected triangle normals is a common issue when constructing new <br>
 * meshes. <br>
 * <br>
 * <img src=fig_Smith2018ContactMesh.png alt=width=600px/><br>
 * <br>
 * # Variable Thickness<br>
 * The Smith2018ContactMesh can calculate the local thickness at each triangle <br>
 * to generate spatially varying thickness maps. Here the optional mesh_back_file<br>
 * property must be defined using a mesh to represent the subchondral bone or<br>
 * back side of an implant component. The thickness is calculated by casting a <br>
 * normal ray from the center of each triangle in the mesh_file mesh towards the<br>
 * mesh_back_file mesh. The thickness is clipped so that it remains within the <br>
 * range defined by min_thickness and max_thickness. <br>
 * <br>
 * # Scaling<br>
 * The mesh can be linearly scaled in the x,y,z directions using the <br>
 * scale_factors property. When using the ScaleTool, these scale factors are <br>
 * set based on the frame set in the scale_frame socket. It is generally <br>
 * advisable to scale both Smith2018ContactMesh meshes used as a contacting pair <br>
 * by the same scale factors to ensure the congruency of the articulating <br>
 * surfaces is not substaintially altered. For example, in a knee joint the <br>
 * scale_frame socket for both the femur and tibia Smith2018ContactMeshes would <br>
 * be connected to the femur frame to ensure both meshes are scaled by the femur <br>
 * scale factors.<br>
 * <br>
 * # Choosing the coarseness of the mesh<br>
 * Because the contact force and potential energy are calculated based on <br>
 * the triangle areas and normals, and the derivatives of these outputs with <br>
 * respect to joint coordinates are commonly calculated in integrators and <br>
 * optimizers, the best performance will be achieved with a smooth mesh whose <br>
 * triangle areas are similar sized. In some extreme cases where the mesh becomes<br>
 * excessively coarse, the simulation slow down caused by jumps in the computed <br>
 * forces outweighs the speed up in collison detection gained by reducing the <br>
 * number of triangles in the mesh. For details on a convergence study based on <br>
 * triangle area see [1]. Note that the GPU implementation described in the paper <br>
 * is not implemented here.<br>
 * <br>
 * # Collison Detection<br>
 * The collision detection algorithm is described in the Smith2018ArticularContact<br>
 * class description. The Smith2018ContactMesh stores all geometric mesh data and<br>
 * also performs ray intersection tests with a individual mesh triangles or an<br>
 * Oriented Bounding Box (OBB) hierarchy. Here, a SimTK::OrientedBoundingBox <br>
 * is constructed for the mesh_file geometry using code adapted from<br>
 * SimTK::ContactGeometry::TriangularMesh::OBBTreeNodeImpl.<br>
 * <br>
 * # References<br>
 * <br>
 *    [1] Smith, C. R., Won Choi, K., Negrut, D., &amp; Thelen, D. G. (2018).<br>
 *        Efficient computation of cartilage contact pressures within dynamic<br>
 *        simulations of movement. Computer Methods in Biomechanics and<br>
 *        Biomedical Engineering: Imaging &amp; Visualization, 6(5), 491-498.
 */
public class Smith2018ContactMesh extends ContactGeometry {
  private transient long swigCPtr;

  public Smith2018ContactMesh(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.Smith2018ContactMesh_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(Smith2018ContactMesh obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_Smith2018ContactMesh(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static Smith2018ContactMesh safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.Smith2018ContactMesh_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new Smith2018ContactMesh(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.Smith2018ContactMesh_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.Smith2018ContactMesh_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.Smith2018ContactMesh_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new Smith2018ContactMesh(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.Smith2018ContactMesh_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_mesh_file(Smith2018ContactMesh source) {
    opensimSimulationJNI.Smith2018ContactMesh_copyProperty_mesh_file(swigCPtr, this, Smith2018ContactMesh.getCPtr(source), source);
  }

  public String get_mesh_file(int i) {
    return opensimSimulationJNI.Smith2018ContactMesh_get_mesh_file__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_mesh_file(int i) {
    return new SWIGTYPE_p_std__string(opensimSimulationJNI.Smith2018ContactMesh_upd_mesh_file__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_mesh_file(int i, String value) {
    opensimSimulationJNI.Smith2018ContactMesh_set_mesh_file__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_mesh_file(String value) {
    return opensimSimulationJNI.Smith2018ContactMesh_append_mesh_file(swigCPtr, this, value);
  }

  public void constructProperty_mesh_file(String initValue) {
    opensimSimulationJNI.Smith2018ContactMesh_constructProperty_mesh_file(swigCPtr, this, initValue);
  }

  public String get_mesh_file() {
    return opensimSimulationJNI.Smith2018ContactMesh_get_mesh_file__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_mesh_file() {
    return new SWIGTYPE_p_std__string(opensimSimulationJNI.Smith2018ContactMesh_upd_mesh_file__SWIG_1(swigCPtr, this), false);
  }

  public void set_mesh_file(String value) {
    opensimSimulationJNI.Smith2018ContactMesh_set_mesh_file__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_elastic_modulus(Smith2018ContactMesh source) {
    opensimSimulationJNI.Smith2018ContactMesh_copyProperty_elastic_modulus(swigCPtr, this, Smith2018ContactMesh.getCPtr(source), source);
  }

  public double get_elastic_modulus(int i) {
    return opensimSimulationJNI.Smith2018ContactMesh_get_elastic_modulus__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_elastic_modulus(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Smith2018ContactMesh_upd_elastic_modulus__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_elastic_modulus(int i, double value) {
    opensimSimulationJNI.Smith2018ContactMesh_set_elastic_modulus__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_elastic_modulus(double value) {
    return opensimSimulationJNI.Smith2018ContactMesh_append_elastic_modulus(swigCPtr, this, value);
  }

  public void constructProperty_elastic_modulus(double initValue) {
    opensimSimulationJNI.Smith2018ContactMesh_constructProperty_elastic_modulus(swigCPtr, this, initValue);
  }

  public double get_elastic_modulus() {
    return opensimSimulationJNI.Smith2018ContactMesh_get_elastic_modulus__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_elastic_modulus() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Smith2018ContactMesh_upd_elastic_modulus__SWIG_1(swigCPtr, this), false);
  }

  public void set_elastic_modulus(double value) {
    opensimSimulationJNI.Smith2018ContactMesh_set_elastic_modulus__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_poissons_ratio(Smith2018ContactMesh source) {
    opensimSimulationJNI.Smith2018ContactMesh_copyProperty_poissons_ratio(swigCPtr, this, Smith2018ContactMesh.getCPtr(source), source);
  }

  public double get_poissons_ratio(int i) {
    return opensimSimulationJNI.Smith2018ContactMesh_get_poissons_ratio__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_poissons_ratio(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Smith2018ContactMesh_upd_poissons_ratio__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_poissons_ratio(int i, double value) {
    opensimSimulationJNI.Smith2018ContactMesh_set_poissons_ratio__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_poissons_ratio(double value) {
    return opensimSimulationJNI.Smith2018ContactMesh_append_poissons_ratio(swigCPtr, this, value);
  }

  public void constructProperty_poissons_ratio(double initValue) {
    opensimSimulationJNI.Smith2018ContactMesh_constructProperty_poissons_ratio(swigCPtr, this, initValue);
  }

  public double get_poissons_ratio() {
    return opensimSimulationJNI.Smith2018ContactMesh_get_poissons_ratio__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_poissons_ratio() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Smith2018ContactMesh_upd_poissons_ratio__SWIG_1(swigCPtr, this), false);
  }

  public void set_poissons_ratio(double value) {
    opensimSimulationJNI.Smith2018ContactMesh_set_poissons_ratio__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_thickness(Smith2018ContactMesh source) {
    opensimSimulationJNI.Smith2018ContactMesh_copyProperty_thickness(swigCPtr, this, Smith2018ContactMesh.getCPtr(source), source);
  }

  public double get_thickness(int i) {
    return opensimSimulationJNI.Smith2018ContactMesh_get_thickness__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_thickness(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Smith2018ContactMesh_upd_thickness__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_thickness(int i, double value) {
    opensimSimulationJNI.Smith2018ContactMesh_set_thickness__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_thickness(double value) {
    return opensimSimulationJNI.Smith2018ContactMesh_append_thickness(swigCPtr, this, value);
  }

  public void constructProperty_thickness(double initValue) {
    opensimSimulationJNI.Smith2018ContactMesh_constructProperty_thickness(swigCPtr, this, initValue);
  }

  public double get_thickness() {
    return opensimSimulationJNI.Smith2018ContactMesh_get_thickness__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_thickness() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Smith2018ContactMesh_upd_thickness__SWIG_1(swigCPtr, this), false);
  }

  public void set_thickness(double value) {
    opensimSimulationJNI.Smith2018ContactMesh_set_thickness__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_use_variable_thickness(Smith2018ContactMesh source) {
    opensimSimulationJNI.Smith2018ContactMesh_copyProperty_use_variable_thickness(swigCPtr, this, Smith2018ContactMesh.getCPtr(source), source);
  }

  public boolean get_use_variable_thickness(int i) {
    return opensimSimulationJNI.Smith2018ContactMesh_get_use_variable_thickness__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_use_variable_thickness(int i) {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Smith2018ContactMesh_upd_use_variable_thickness__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_use_variable_thickness(int i, boolean value) {
    opensimSimulationJNI.Smith2018ContactMesh_set_use_variable_thickness__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_use_variable_thickness(boolean value) {
    return opensimSimulationJNI.Smith2018ContactMesh_append_use_variable_thickness(swigCPtr, this, value);
  }

  public void constructProperty_use_variable_thickness(boolean initValue) {
    opensimSimulationJNI.Smith2018ContactMesh_constructProperty_use_variable_thickness(swigCPtr, this, initValue);
  }

  public boolean get_use_variable_thickness() {
    return opensimSimulationJNI.Smith2018ContactMesh_get_use_variable_thickness__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_use_variable_thickness() {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Smith2018ContactMesh_upd_use_variable_thickness__SWIG_1(swigCPtr, this), false);
  }

  public void set_use_variable_thickness(boolean value) {
    opensimSimulationJNI.Smith2018ContactMesh_set_use_variable_thickness__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_mesh_back_file(Smith2018ContactMesh source) {
    opensimSimulationJNI.Smith2018ContactMesh_copyProperty_mesh_back_file(swigCPtr, this, Smith2018ContactMesh.getCPtr(source), source);
  }

  public String get_mesh_back_file(int i) {
    return opensimSimulationJNI.Smith2018ContactMesh_get_mesh_back_file__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_mesh_back_file(int i) {
    return new SWIGTYPE_p_std__string(opensimSimulationJNI.Smith2018ContactMesh_upd_mesh_back_file__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_mesh_back_file(int i, String value) {
    opensimSimulationJNI.Smith2018ContactMesh_set_mesh_back_file__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_mesh_back_file(String value) {
    return opensimSimulationJNI.Smith2018ContactMesh_append_mesh_back_file(swigCPtr, this, value);
  }

  public void constructProperty_mesh_back_file() {
    opensimSimulationJNI.Smith2018ContactMesh_constructProperty_mesh_back_file__SWIG_0(swigCPtr, this);
  }

  public void constructProperty_mesh_back_file(String initValue) {
    opensimSimulationJNI.Smith2018ContactMesh_constructProperty_mesh_back_file__SWIG_1(swigCPtr, this, initValue);
  }

  public String get_mesh_back_file() {
    return opensimSimulationJNI.Smith2018ContactMesh_get_mesh_back_file__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_mesh_back_file() {
    return new SWIGTYPE_p_std__string(opensimSimulationJNI.Smith2018ContactMesh_upd_mesh_back_file__SWIG_1(swigCPtr, this), false);
  }

  public void set_mesh_back_file(String value) {
    opensimSimulationJNI.Smith2018ContactMesh_set_mesh_back_file__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_min_thickness(Smith2018ContactMesh source) {
    opensimSimulationJNI.Smith2018ContactMesh_copyProperty_min_thickness(swigCPtr, this, Smith2018ContactMesh.getCPtr(source), source);
  }

  public double get_min_thickness(int i) {
    return opensimSimulationJNI.Smith2018ContactMesh_get_min_thickness__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_min_thickness(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Smith2018ContactMesh_upd_min_thickness__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_min_thickness(int i, double value) {
    opensimSimulationJNI.Smith2018ContactMesh_set_min_thickness__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_min_thickness(double value) {
    return opensimSimulationJNI.Smith2018ContactMesh_append_min_thickness(swigCPtr, this, value);
  }

  public void constructProperty_min_thickness() {
    opensimSimulationJNI.Smith2018ContactMesh_constructProperty_min_thickness__SWIG_0(swigCPtr, this);
  }

  public void constructProperty_min_thickness(double initValue) {
    opensimSimulationJNI.Smith2018ContactMesh_constructProperty_min_thickness__SWIG_1(swigCPtr, this, initValue);
  }

  public double get_min_thickness() {
    return opensimSimulationJNI.Smith2018ContactMesh_get_min_thickness__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_min_thickness() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Smith2018ContactMesh_upd_min_thickness__SWIG_1(swigCPtr, this), false);
  }

  public void set_min_thickness(double value) {
    opensimSimulationJNI.Smith2018ContactMesh_set_min_thickness__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_max_thickness(Smith2018ContactMesh source) {
    opensimSimulationJNI.Smith2018ContactMesh_copyProperty_max_thickness(swigCPtr, this, Smith2018ContactMesh.getCPtr(source), source);
  }

  public double get_max_thickness(int i) {
    return opensimSimulationJNI.Smith2018ContactMesh_get_max_thickness__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_max_thickness(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Smith2018ContactMesh_upd_max_thickness__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_max_thickness(int i, double value) {
    opensimSimulationJNI.Smith2018ContactMesh_set_max_thickness__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_max_thickness(double value) {
    return opensimSimulationJNI.Smith2018ContactMesh_append_max_thickness(swigCPtr, this, value);
  }

  public void constructProperty_max_thickness() {
    opensimSimulationJNI.Smith2018ContactMesh_constructProperty_max_thickness__SWIG_0(swigCPtr, this);
  }

  public void constructProperty_max_thickness(double initValue) {
    opensimSimulationJNI.Smith2018ContactMesh_constructProperty_max_thickness__SWIG_1(swigCPtr, this, initValue);
  }

  public double get_max_thickness() {
    return opensimSimulationJNI.Smith2018ContactMesh_get_max_thickness__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_max_thickness() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Smith2018ContactMesh_upd_max_thickness__SWIG_1(swigCPtr, this), false);
  }

  public void set_max_thickness(double value) {
    opensimSimulationJNI.Smith2018ContactMesh_set_max_thickness__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_scale_factors(Smith2018ContactMesh source) {
    opensimSimulationJNI.Smith2018ContactMesh_copyProperty_scale_factors(swigCPtr, this, Smith2018ContactMesh.getCPtr(source), source);
  }

  public Vec3 get_scale_factors(int i) {
    return new Vec3(opensimSimulationJNI.Smith2018ContactMesh_get_scale_factors__SWIG_0(swigCPtr, this, i), false);
  }

  public Vec3 upd_scale_factors(int i) {
    return new Vec3(opensimSimulationJNI.Smith2018ContactMesh_upd_scale_factors__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_scale_factors(int i, Vec3 value) {
    opensimSimulationJNI.Smith2018ContactMesh_set_scale_factors__SWIG_0(swigCPtr, this, i, Vec3.getCPtr(value), value);
  }

  public int append_scale_factors(Vec3 value) {
    return opensimSimulationJNI.Smith2018ContactMesh_append_scale_factors(swigCPtr, this, Vec3.getCPtr(value), value);
  }

  public void constructProperty_scale_factors(Vec3 initValue) {
    opensimSimulationJNI.Smith2018ContactMesh_constructProperty_scale_factors(swigCPtr, this, Vec3.getCPtr(initValue), initValue);
  }

  public Vec3 get_scale_factors() {
    return new Vec3(opensimSimulationJNI.Smith2018ContactMesh_get_scale_factors__SWIG_1(swigCPtr, this), false);
  }

  public Vec3 upd_scale_factors() {
    return new Vec3(opensimSimulationJNI.Smith2018ContactMesh_upd_scale_factors__SWIG_1(swigCPtr, this), false);
  }

  public void set_scale_factors(Vec3 value) {
    opensimSimulationJNI.Smith2018ContactMesh_set_scale_factors__SWIG_1(swigCPtr, this, Vec3.getCPtr(value), value);
  }

  public void setPropertyIndex_socket_scale_frame(SWIGTYPE_p_PropertyIndex value) {
    opensimSimulationJNI.Smith2018ContactMesh_PropertyIndex_socket_scale_frame_set(swigCPtr, this, SWIGTYPE_p_PropertyIndex.getCPtr(value));
  }

  public SWIGTYPE_p_PropertyIndex getPropertyIndex_socket_scale_frame() {
    return new SWIGTYPE_p_PropertyIndex(opensimSimulationJNI.Smith2018ContactMesh_PropertyIndex_socket_scale_frame_get(swigCPtr, this), true);
  }

  public void connectSocket_scale_frame(OpenSimObject object) {
    opensimSimulationJNI.Smith2018ContactMesh_connectSocket_scale_frame(swigCPtr, this, OpenSimObject.getCPtr(object), object);
  }

  public Smith2018ContactMesh() {
    this(opensimSimulationJNI.new_Smith2018ContactMesh__SWIG_0(), true);
  }

  public Smith2018ContactMesh(String name, String mesh_file, PhysicalFrame frame) {
    this(opensimSimulationJNI.new_Smith2018ContactMesh__SWIG_1(name, mesh_file, PhysicalFrame.getCPtr(frame), frame), true);
  }

  public Smith2018ContactMesh(String name, String mesh_file, PhysicalFrame frame, Vec3 location, Vec3 orientation) {
    this(opensimSimulationJNI.new_Smith2018ContactMesh__SWIG_2(name, mesh_file, PhysicalFrame.getCPtr(frame), frame, Vec3.getCPtr(location), location, Vec3.getCPtr(orientation), orientation), true);
  }

  public Smith2018ContactMesh(String name, String mesh_file, PhysicalFrame frame, Vec3 location, Vec3 orientation, boolean use_variable_thickness, String mesh_back_file, double min_thickness, double max_thickness) {
    this(opensimSimulationJNI.new_Smith2018ContactMesh__SWIG_3(name, mesh_file, PhysicalFrame.getCPtr(frame), frame, Vec3.getCPtr(location), location, Vec3.getCPtr(orientation), orientation, use_variable_thickness, mesh_back_file, min_thickness, max_thickness), true);
  }

  public SWIGTYPE_p_SimTK__ContactGeometry createSimTKContactGeometry() {
    return new SWIGTYPE_p_SimTK__ContactGeometry(opensimSimulationJNI.Smith2018ContactMesh_createSimTKContactGeometry(swigCPtr, this), true);
  }

  public PolygonalMesh getPolygonalMesh() {
    return new PolygonalMesh(opensimSimulationJNI.Smith2018ContactMesh_getPolygonalMesh(swigCPtr, this), false);
  }

  public int getNumFaces() {
    return opensimSimulationJNI.Smith2018ContactMesh_getNumFaces(swigCPtr, this);
  }

  public int getNumVertices() {
    return opensimSimulationJNI.Smith2018ContactMesh_getNumVertices(swigCPtr, this);
  }

  public SWIGTYPE_p_std__setT_int_t getNeighborTris(int tri) {
    return new SWIGTYPE_p_std__setT_int_t(opensimSimulationJNI.Smith2018ContactMesh_getNeighborTris(swigCPtr, this, tri), false);
  }

  public SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t getRegionalTriangleIndices() {
    return new SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t(opensimSimulationJNI.Smith2018ContactMesh_getRegionalTriangleIndices(swigCPtr, this), false);
  }

  public double getTriangleThickness(int i) {
    return opensimSimulationJNI.Smith2018ContactMesh_getTriangleThickness(swigCPtr, this, i);
  }

  public double getTriangleElasticModulus(int i) {
    return opensimSimulationJNI.Smith2018ContactMesh_getTriangleElasticModulus(swigCPtr, this, i);
  }

  public double getTrianglePoissonsRatio(int i) {
    return opensimSimulationJNI.Smith2018ContactMesh_getTrianglePoissonsRatio(swigCPtr, this, i);
  }

  public Vector getTriangleAreas() {
    return new Vector(opensimSimulationJNI.Smith2018ContactMesh_getTriangleAreas(swigCPtr, this), false);
  }

  public VectorVec3 getTriangleCenters() {
    return new VectorVec3(opensimSimulationJNI.Smith2018ContactMesh_getTriangleCenters(swigCPtr, this), false);
  }

  public SWIGTYPE_p_SimTK__Vector_T_SimTK__UnitVecT_double_1_t_t getTriangleNormals() {
    return new SWIGTYPE_p_SimTK__Vector_T_SimTK__UnitVecT_double_1_t_t(opensimSimulationJNI.Smith2018ContactMesh_getTriangleNormals(swigCPtr, this), false);
  }

  public MatrixVec3 getFaceVertexLocations() {
    return new MatrixVec3(opensimSimulationJNI.Smith2018ContactMesh_getFaceVertexLocations(swigCPtr, this), false);
  }

  public VectorVec3 getVertexLocations() {
    return new VectorVec3(opensimSimulationJNI.Smith2018ContactMesh_getVertexLocations(swigCPtr, this), false);
  }

  public SWIGTYPE_p_OpenSim__Smith2018ContactMesh__OBBTreeNode getOBBTreeNode() {
    return new SWIGTYPE_p_OpenSim__Smith2018ContactMesh__OBBTreeNode(opensimSimulationJNI.Smith2018ContactMesh_getOBBTreeNode(swigCPtr, this), false);
  }

  public int getOBBNumTriangles() {
    return opensimSimulationJNI.Smith2018ContactMesh_getOBBNumTriangles(swigCPtr, this);
  }

  public boolean rayIntersectMesh(Vec3 origin, UnitVec3 direction, double min_proximity, double max_proximity, SWIGTYPE_p_int tri, Vec3 intersection_point, SWIGTYPE_p_double distance) {
    return opensimSimulationJNI.Smith2018ContactMesh_rayIntersectMesh(swigCPtr, this, Vec3.getCPtr(origin), origin, UnitVec3.getCPtr(direction), direction, min_proximity, max_proximity, SWIGTYPE_p_int.getCPtr(tri), Vec3.getCPtr(intersection_point), intersection_point, SWIGTYPE_p_double.getCPtr(distance));
  }

  public void generateDecorations(boolean fixed, ModelDisplayHints hints, State s, ArrayDecorativeGeometry geometry) {
    opensimSimulationJNI.Smith2018ContactMesh_generateDecorations(swigCPtr, this, fixed, ModelDisplayHints.getCPtr(hints), hints, State.getCPtr(s), s, ArrayDecorativeGeometry.getCPtr(geometry), geometry);
  }

  public PhysicalFrame getMeshFrame() {
    return new PhysicalFrame(opensimSimulationJNI.Smith2018ContactMesh_getMeshFrame(swigCPtr, this), false);
  }

  public void printMeshDebugInfo() {
    opensimSimulationJNI.Smith2018ContactMesh_printMeshDebugInfo(swigCPtr, this);
  }

}
