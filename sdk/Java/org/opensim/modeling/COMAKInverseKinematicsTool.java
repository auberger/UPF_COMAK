/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  This tool enables inverse kinematics to be performed for models <br>
 *  that include joints where some Coordinates (degrees of freedom) can be <br>
 *  accurately determined from motion capture (marker_determined) and others <br>
 *  cannot (secondary). A forward dynamic simulation is performed to obstrain a <br>
 *  set of constraint functions to couple the secondary coordinates to specific <br>
 * marker determined coordinates.  <br>
 * <br>
 * @author Colin Smith
 */
public class COMAKInverseKinematicsTool extends OpenSimObject {
  private transient long swigCPtr;

  public COMAKInverseKinematicsTool(long cPtr, boolean cMemoryOwn) {
    super(opensimJAMJNI.COMAKInverseKinematicsTool_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(COMAKInverseKinematicsTool obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimJAMJNI.delete_COMAKInverseKinematicsTool(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static COMAKInverseKinematicsTool safeDownCast(OpenSimObject obj) {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new COMAKInverseKinematicsTool(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimJAMJNI.COMAKInverseKinematicsTool_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new COMAKInverseKinematicsTool(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_model_file(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_model_file(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public String get_model_file(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_model_file__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_model_file(int i) {
    return new SWIGTYPE_p_std__string(opensimJAMJNI.COMAKInverseKinematicsTool_upd_model_file__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_model_file(int i, String value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_model_file__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_model_file(String value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_model_file(swigCPtr, this, value);
  }

  public void constructProperty_model_file(String initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_model_file(swigCPtr, this, initValue);
  }

  public String get_model_file() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_model_file__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_model_file() {
    return new SWIGTYPE_p_std__string(opensimJAMJNI.COMAKInverseKinematicsTool_upd_model_file__SWIG_1(swigCPtr, this), false);
  }

  public void set_model_file(String value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_model_file__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_results_directory(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_results_directory(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public String get_results_directory(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_results_directory__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_results_directory(int i) {
    return new SWIGTYPE_p_std__string(opensimJAMJNI.COMAKInverseKinematicsTool_upd_results_directory__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_results_directory(int i, String value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_results_directory__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_results_directory(String value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_results_directory(swigCPtr, this, value);
  }

  public void constructProperty_results_directory(String initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_results_directory(swigCPtr, this, initValue);
  }

  public String get_results_directory() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_results_directory__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_results_directory() {
    return new SWIGTYPE_p_std__string(opensimJAMJNI.COMAKInverseKinematicsTool_upd_results_directory__SWIG_1(swigCPtr, this), false);
  }

  public void set_results_directory(String value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_results_directory__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_results_prefix(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_results_prefix(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public String get_results_prefix(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_results_prefix__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_results_prefix(int i) {
    return new SWIGTYPE_p_std__string(opensimJAMJNI.COMAKInverseKinematicsTool_upd_results_prefix__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_results_prefix(int i, String value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_results_prefix__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_results_prefix(String value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_results_prefix(swigCPtr, this, value);
  }

  public void constructProperty_results_prefix(String initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_results_prefix(swigCPtr, this, initValue);
  }

  public String get_results_prefix() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_results_prefix__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_results_prefix() {
    return new SWIGTYPE_p_std__string(opensimJAMJNI.COMAKInverseKinematicsTool_upd_results_prefix__SWIG_1(swigCPtr, this), false);
  }

  public void set_results_prefix(String value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_results_prefix__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_perform_secondary_constraint_sim(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_perform_secondary_constraint_sim(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public boolean get_perform_secondary_constraint_sim(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_perform_secondary_constraint_sim__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_perform_secondary_constraint_sim(int i) {
    return new SWIGTYPE_p_bool(opensimJAMJNI.COMAKInverseKinematicsTool_upd_perform_secondary_constraint_sim__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_perform_secondary_constraint_sim(int i, boolean value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_perform_secondary_constraint_sim__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_perform_secondary_constraint_sim(boolean value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_perform_secondary_constraint_sim(swigCPtr, this, value);
  }

  public void constructProperty_perform_secondary_constraint_sim(boolean initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_perform_secondary_constraint_sim(swigCPtr, this, initValue);
  }

  public boolean get_perform_secondary_constraint_sim() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_perform_secondary_constraint_sim__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_perform_secondary_constraint_sim() {
    return new SWIGTYPE_p_bool(opensimJAMJNI.COMAKInverseKinematicsTool_upd_perform_secondary_constraint_sim__SWIG_1(swigCPtr, this), false);
  }

  public void set_perform_secondary_constraint_sim(boolean value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_perform_secondary_constraint_sim__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_secondary_coordinates(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_secondary_coordinates(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public String get_secondary_coordinates(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_secondary_coordinates(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_secondary_coordinates(int i) {
    return new SWIGTYPE_p_std__string(opensimJAMJNI.COMAKInverseKinematicsTool_upd_secondary_coordinates(swigCPtr, this, i), false);
  }

  public void set_secondary_coordinates(int i, String value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_secondary_coordinates(swigCPtr, this, i, value);
  }

  public int append_secondary_coordinates(String value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_secondary_coordinates(swigCPtr, this, value);
  }

  public void constructProperty_secondary_coordinates() {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_secondary_coordinates(swigCPtr, this);
  }

  public void copyProperty_secondary_coupled_coordinate(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_secondary_coupled_coordinate(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public String get_secondary_coupled_coordinate(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_secondary_coupled_coordinate__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_secondary_coupled_coordinate(int i) {
    return new SWIGTYPE_p_std__string(opensimJAMJNI.COMAKInverseKinematicsTool_upd_secondary_coupled_coordinate__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_secondary_coupled_coordinate(int i, String value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_secondary_coupled_coordinate__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_secondary_coupled_coordinate(String value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_secondary_coupled_coordinate(swigCPtr, this, value);
  }

  public void constructProperty_secondary_coupled_coordinate() {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_secondary_coupled_coordinate__SWIG_0(swigCPtr, this);
  }

  public void constructProperty_secondary_coupled_coordinate(String initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_secondary_coupled_coordinate__SWIG_1(swigCPtr, this, initValue);
  }

  public String get_secondary_coupled_coordinate() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_secondary_coupled_coordinate__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_secondary_coupled_coordinate() {
    return new SWIGTYPE_p_std__string(opensimJAMJNI.COMAKInverseKinematicsTool_upd_secondary_coupled_coordinate__SWIG_1(swigCPtr, this), false);
  }

  public void set_secondary_coupled_coordinate(String value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_secondary_coupled_coordinate__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_secondary_constraint_sim_settle_threshold(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_secondary_constraint_sim_settle_threshold(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public double get_secondary_constraint_sim_settle_threshold(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_secondary_constraint_sim_settle_threshold__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_secondary_constraint_sim_settle_threshold(int i) {
    return new SWIGTYPE_p_double(opensimJAMJNI.COMAKInverseKinematicsTool_upd_secondary_constraint_sim_settle_threshold__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_secondary_constraint_sim_settle_threshold(int i, double value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_secondary_constraint_sim_settle_threshold__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_secondary_constraint_sim_settle_threshold(double value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_secondary_constraint_sim_settle_threshold(swigCPtr, this, value);
  }

  public void constructProperty_secondary_constraint_sim_settle_threshold(double initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_secondary_constraint_sim_settle_threshold(swigCPtr, this, initValue);
  }

  public double get_secondary_constraint_sim_settle_threshold() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_secondary_constraint_sim_settle_threshold__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_secondary_constraint_sim_settle_threshold() {
    return new SWIGTYPE_p_double(opensimJAMJNI.COMAKInverseKinematicsTool_upd_secondary_constraint_sim_settle_threshold__SWIG_1(swigCPtr, this), false);
  }

  public void set_secondary_constraint_sim_settle_threshold(double value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_secondary_constraint_sim_settle_threshold__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_secondary_constraint_sim_sweep_time(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_secondary_constraint_sim_sweep_time(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public double get_secondary_constraint_sim_sweep_time(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_secondary_constraint_sim_sweep_time__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_secondary_constraint_sim_sweep_time(int i) {
    return new SWIGTYPE_p_double(opensimJAMJNI.COMAKInverseKinematicsTool_upd_secondary_constraint_sim_sweep_time__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_secondary_constraint_sim_sweep_time(int i, double value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_secondary_constraint_sim_sweep_time__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_secondary_constraint_sim_sweep_time(double value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_secondary_constraint_sim_sweep_time(swigCPtr, this, value);
  }

  public void constructProperty_secondary_constraint_sim_sweep_time(double initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_secondary_constraint_sim_sweep_time(swigCPtr, this, initValue);
  }

  public double get_secondary_constraint_sim_sweep_time() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_secondary_constraint_sim_sweep_time__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_secondary_constraint_sim_sweep_time() {
    return new SWIGTYPE_p_double(opensimJAMJNI.COMAKInverseKinematicsTool_upd_secondary_constraint_sim_sweep_time__SWIG_1(swigCPtr, this), false);
  }

  public void set_secondary_constraint_sim_sweep_time(double value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_secondary_constraint_sim_sweep_time__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_secondary_coupled_coordinate_start_value(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_secondary_coupled_coordinate_start_value(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public double get_secondary_coupled_coordinate_start_value(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_secondary_coupled_coordinate_start_value__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_secondary_coupled_coordinate_start_value(int i) {
    return new SWIGTYPE_p_double(opensimJAMJNI.COMAKInverseKinematicsTool_upd_secondary_coupled_coordinate_start_value__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_secondary_coupled_coordinate_start_value(int i, double value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_secondary_coupled_coordinate_start_value__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_secondary_coupled_coordinate_start_value(double value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_secondary_coupled_coordinate_start_value(swigCPtr, this, value);
  }

  public void constructProperty_secondary_coupled_coordinate_start_value(double initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_secondary_coupled_coordinate_start_value(swigCPtr, this, initValue);
  }

  public double get_secondary_coupled_coordinate_start_value() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_secondary_coupled_coordinate_start_value__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_secondary_coupled_coordinate_start_value() {
    return new SWIGTYPE_p_double(opensimJAMJNI.COMAKInverseKinematicsTool_upd_secondary_coupled_coordinate_start_value__SWIG_1(swigCPtr, this), false);
  }

  public void set_secondary_coupled_coordinate_start_value(double value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_secondary_coupled_coordinate_start_value__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_secondary_coupled_coordinate_stop_value(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_secondary_coupled_coordinate_stop_value(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public double get_secondary_coupled_coordinate_stop_value(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_secondary_coupled_coordinate_stop_value__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_secondary_coupled_coordinate_stop_value(int i) {
    return new SWIGTYPE_p_double(opensimJAMJNI.COMAKInverseKinematicsTool_upd_secondary_coupled_coordinate_stop_value__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_secondary_coupled_coordinate_stop_value(int i, double value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_secondary_coupled_coordinate_stop_value__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_secondary_coupled_coordinate_stop_value(double value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_secondary_coupled_coordinate_stop_value(swigCPtr, this, value);
  }

  public void constructProperty_secondary_coupled_coordinate_stop_value(double initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_secondary_coupled_coordinate_stop_value(swigCPtr, this, initValue);
  }

  public double get_secondary_coupled_coordinate_stop_value() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_secondary_coupled_coordinate_stop_value__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_secondary_coupled_coordinate_stop_value() {
    return new SWIGTYPE_p_double(opensimJAMJNI.COMAKInverseKinematicsTool_upd_secondary_coupled_coordinate_stop_value__SWIG_1(swigCPtr, this), false);
  }

  public void set_secondary_coupled_coordinate_stop_value(double value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_secondary_coupled_coordinate_stop_value__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_secondary_constraint_sim_integrator_accuracy(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_secondary_constraint_sim_integrator_accuracy(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public double get_secondary_constraint_sim_integrator_accuracy(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_secondary_constraint_sim_integrator_accuracy__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_secondary_constraint_sim_integrator_accuracy(int i) {
    return new SWIGTYPE_p_double(opensimJAMJNI.COMAKInverseKinematicsTool_upd_secondary_constraint_sim_integrator_accuracy__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_secondary_constraint_sim_integrator_accuracy(int i, double value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_secondary_constraint_sim_integrator_accuracy__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_secondary_constraint_sim_integrator_accuracy(double value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_secondary_constraint_sim_integrator_accuracy(swigCPtr, this, value);
  }

  public void constructProperty_secondary_constraint_sim_integrator_accuracy(double initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_secondary_constraint_sim_integrator_accuracy(swigCPtr, this, initValue);
  }

  public double get_secondary_constraint_sim_integrator_accuracy() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_secondary_constraint_sim_integrator_accuracy__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_secondary_constraint_sim_integrator_accuracy() {
    return new SWIGTYPE_p_double(opensimJAMJNI.COMAKInverseKinematicsTool_upd_secondary_constraint_sim_integrator_accuracy__SWIG_1(swigCPtr, this), false);
  }

  public void set_secondary_constraint_sim_integrator_accuracy(double value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_secondary_constraint_sim_integrator_accuracy__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_secondary_constraint_sim_internal_step_limit(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_secondary_constraint_sim_internal_step_limit(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public int get_secondary_constraint_sim_internal_step_limit(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_secondary_constraint_sim_internal_step_limit__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_int upd_secondary_constraint_sim_internal_step_limit(int i) {
    return new SWIGTYPE_p_int(opensimJAMJNI.COMAKInverseKinematicsTool_upd_secondary_constraint_sim_internal_step_limit__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_secondary_constraint_sim_internal_step_limit(int i, int value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_secondary_constraint_sim_internal_step_limit__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_secondary_constraint_sim_internal_step_limit(int value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_secondary_constraint_sim_internal_step_limit(swigCPtr, this, value);
  }

  public void constructProperty_secondary_constraint_sim_internal_step_limit(int initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_secondary_constraint_sim_internal_step_limit(swigCPtr, this, initValue);
  }

  public int get_secondary_constraint_sim_internal_step_limit() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_secondary_constraint_sim_internal_step_limit__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_int upd_secondary_constraint_sim_internal_step_limit() {
    return new SWIGTYPE_p_int(opensimJAMJNI.COMAKInverseKinematicsTool_upd_secondary_constraint_sim_internal_step_limit__SWIG_1(swigCPtr, this), false);
  }

  public void set_secondary_constraint_sim_internal_step_limit(int value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_secondary_constraint_sim_internal_step_limit__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_secondary_constraint_function_file(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_secondary_constraint_function_file(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public String get_secondary_constraint_function_file(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_secondary_constraint_function_file__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_secondary_constraint_function_file(int i) {
    return new SWIGTYPE_p_std__string(opensimJAMJNI.COMAKInverseKinematicsTool_upd_secondary_constraint_function_file__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_secondary_constraint_function_file(int i, String value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_secondary_constraint_function_file__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_secondary_constraint_function_file(String value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_secondary_constraint_function_file(swigCPtr, this, value);
  }

  public void constructProperty_secondary_constraint_function_file(String initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_secondary_constraint_function_file(swigCPtr, this, initValue);
  }

  public String get_secondary_constraint_function_file() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_secondary_constraint_function_file__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_secondary_constraint_function_file() {
    return new SWIGTYPE_p_std__string(opensimJAMJNI.COMAKInverseKinematicsTool_upd_secondary_constraint_function_file__SWIG_1(swigCPtr, this), false);
  }

  public void set_secondary_constraint_function_file(String value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_secondary_constraint_function_file__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_constraint_function_num_interpolation_points(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_constraint_function_num_interpolation_points(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public int get_constraint_function_num_interpolation_points(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_constraint_function_num_interpolation_points__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_int upd_constraint_function_num_interpolation_points(int i) {
    return new SWIGTYPE_p_int(opensimJAMJNI.COMAKInverseKinematicsTool_upd_constraint_function_num_interpolation_points__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_constraint_function_num_interpolation_points(int i, int value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_constraint_function_num_interpolation_points__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_constraint_function_num_interpolation_points(int value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_constraint_function_num_interpolation_points(swigCPtr, this, value);
  }

  public void constructProperty_constraint_function_num_interpolation_points(int initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_constraint_function_num_interpolation_points(swigCPtr, this, initValue);
  }

  public int get_constraint_function_num_interpolation_points() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_constraint_function_num_interpolation_points__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_int upd_constraint_function_num_interpolation_points() {
    return new SWIGTYPE_p_int(opensimJAMJNI.COMAKInverseKinematicsTool_upd_constraint_function_num_interpolation_points__SWIG_1(swigCPtr, this), false);
  }

  public void set_constraint_function_num_interpolation_points(int value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_constraint_function_num_interpolation_points__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_print_secondary_constraint_sim_results(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_print_secondary_constraint_sim_results(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public boolean get_print_secondary_constraint_sim_results(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_print_secondary_constraint_sim_results__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_print_secondary_constraint_sim_results(int i) {
    return new SWIGTYPE_p_bool(opensimJAMJNI.COMAKInverseKinematicsTool_upd_print_secondary_constraint_sim_results__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_print_secondary_constraint_sim_results(int i, boolean value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_print_secondary_constraint_sim_results__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_print_secondary_constraint_sim_results(boolean value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_print_secondary_constraint_sim_results(swigCPtr, this, value);
  }

  public void constructProperty_print_secondary_constraint_sim_results(boolean initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_print_secondary_constraint_sim_results(swigCPtr, this, initValue);
  }

  public boolean get_print_secondary_constraint_sim_results() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_print_secondary_constraint_sim_results__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_print_secondary_constraint_sim_results() {
    return new SWIGTYPE_p_bool(opensimJAMJNI.COMAKInverseKinematicsTool_upd_print_secondary_constraint_sim_results__SWIG_1(swigCPtr, this), false);
  }

  public void set_print_secondary_constraint_sim_results(boolean value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_print_secondary_constraint_sim_results__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_constrained_model_file(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_constrained_model_file(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public String get_constrained_model_file(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_constrained_model_file__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_constrained_model_file(int i) {
    return new SWIGTYPE_p_std__string(opensimJAMJNI.COMAKInverseKinematicsTool_upd_constrained_model_file__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_constrained_model_file(int i, String value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_constrained_model_file__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_constrained_model_file(String value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_constrained_model_file(swigCPtr, this, value);
  }

  public void constructProperty_constrained_model_file(String initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_constrained_model_file(swigCPtr, this, initValue);
  }

  public String get_constrained_model_file() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_constrained_model_file__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_constrained_model_file() {
    return new SWIGTYPE_p_std__string(opensimJAMJNI.COMAKInverseKinematicsTool_upd_constrained_model_file__SWIG_1(swigCPtr, this), false);
  }

  public void set_constrained_model_file(String value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_constrained_model_file__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_perform_inverse_kinematics(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_perform_inverse_kinematics(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public boolean get_perform_inverse_kinematics(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_perform_inverse_kinematics__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_perform_inverse_kinematics(int i) {
    return new SWIGTYPE_p_bool(opensimJAMJNI.COMAKInverseKinematicsTool_upd_perform_inverse_kinematics__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_perform_inverse_kinematics(int i, boolean value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_perform_inverse_kinematics__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_perform_inverse_kinematics(boolean value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_perform_inverse_kinematics(swigCPtr, this, value);
  }

  public void constructProperty_perform_inverse_kinematics(boolean initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_perform_inverse_kinematics(swigCPtr, this, initValue);
  }

  public boolean get_perform_inverse_kinematics() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_perform_inverse_kinematics__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_perform_inverse_kinematics() {
    return new SWIGTYPE_p_bool(opensimJAMJNI.COMAKInverseKinematicsTool_upd_perform_inverse_kinematics__SWIG_1(swigCPtr, this), false);
  }

  public void set_perform_inverse_kinematics(boolean value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_perform_inverse_kinematics__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_marker_file(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_marker_file(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public String get_marker_file(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_marker_file__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_marker_file(int i) {
    return new SWIGTYPE_p_std__string(opensimJAMJNI.COMAKInverseKinematicsTool_upd_marker_file__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_marker_file(int i, String value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_marker_file__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_marker_file(String value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_marker_file(swigCPtr, this, value);
  }

  public void constructProperty_marker_file(String initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_marker_file(swigCPtr, this, initValue);
  }

  public String get_marker_file() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_marker_file__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_marker_file() {
    return new SWIGTYPE_p_std__string(opensimJAMJNI.COMAKInverseKinematicsTool_upd_marker_file__SWIG_1(swigCPtr, this), false);
  }

  public void set_marker_file(String value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_marker_file__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_coordinate_file(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_coordinate_file(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public String get_coordinate_file(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_coordinate_file__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_coordinate_file(int i) {
    return new SWIGTYPE_p_std__string(opensimJAMJNI.COMAKInverseKinematicsTool_upd_coordinate_file__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_coordinate_file(int i, String value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_coordinate_file__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_coordinate_file(String value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_coordinate_file(swigCPtr, this, value);
  }

  public void constructProperty_coordinate_file(String initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_coordinate_file(swigCPtr, this, initValue);
  }

  public String get_coordinate_file() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_coordinate_file__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_coordinate_file() {
    return new SWIGTYPE_p_std__string(opensimJAMJNI.COMAKInverseKinematicsTool_upd_coordinate_file__SWIG_1(swigCPtr, this), false);
  }

  public void set_coordinate_file(String value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_coordinate_file__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_output_motion_file(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_output_motion_file(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public String get_output_motion_file(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_output_motion_file__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_output_motion_file(int i) {
    return new SWIGTYPE_p_std__string(opensimJAMJNI.COMAKInverseKinematicsTool_upd_output_motion_file__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_output_motion_file(int i, String value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_output_motion_file__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_output_motion_file(String value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_output_motion_file(swigCPtr, this, value);
  }

  public void constructProperty_output_motion_file(String initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_output_motion_file(swigCPtr, this, initValue);
  }

  public String get_output_motion_file() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_output_motion_file__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_output_motion_file() {
    return new SWIGTYPE_p_std__string(opensimJAMJNI.COMAKInverseKinematicsTool_upd_output_motion_file__SWIG_1(swigCPtr, this), false);
  }

  public void set_output_motion_file(String value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_output_motion_file__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_time_range(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_time_range(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public double get_time_range(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_time_range(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_time_range(int i) {
    return new SWIGTYPE_p_double(opensimJAMJNI.COMAKInverseKinematicsTool_upd_time_range(swigCPtr, this, i), false);
  }

  public void set_time_range(int i, double value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_time_range(swigCPtr, this, i, value);
  }

  public int append_time_range(double value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_time_range(swigCPtr, this, value);
  }

  public void copyProperty_report_errors(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_report_errors(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public boolean get_report_errors(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_report_errors__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_report_errors(int i) {
    return new SWIGTYPE_p_bool(opensimJAMJNI.COMAKInverseKinematicsTool_upd_report_errors__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_report_errors(int i, boolean value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_report_errors__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_report_errors(boolean value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_report_errors(swigCPtr, this, value);
  }

  public void constructProperty_report_errors(boolean initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_report_errors(swigCPtr, this, initValue);
  }

  public boolean get_report_errors() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_report_errors__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_report_errors() {
    return new SWIGTYPE_p_bool(opensimJAMJNI.COMAKInverseKinematicsTool_upd_report_errors__SWIG_1(swigCPtr, this), false);
  }

  public void set_report_errors(boolean value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_report_errors__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_report_marker_locations(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_report_marker_locations(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public boolean get_report_marker_locations(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_report_marker_locations__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_report_marker_locations(int i) {
    return new SWIGTYPE_p_bool(opensimJAMJNI.COMAKInverseKinematicsTool_upd_report_marker_locations__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_report_marker_locations(int i, boolean value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_report_marker_locations__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_report_marker_locations(boolean value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_report_marker_locations(swigCPtr, this, value);
  }

  public void constructProperty_report_marker_locations(boolean initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_report_marker_locations(swigCPtr, this, initValue);
  }

  public boolean get_report_marker_locations() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_report_marker_locations__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_report_marker_locations() {
    return new SWIGTYPE_p_bool(opensimJAMJNI.COMAKInverseKinematicsTool_upd_report_marker_locations__SWIG_1(swigCPtr, this), false);
  }

  public void set_report_marker_locations(boolean value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_report_marker_locations__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_ik_constraint_weight(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_ik_constraint_weight(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public double get_ik_constraint_weight(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_ik_constraint_weight__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_ik_constraint_weight(int i) {
    return new SWIGTYPE_p_double(opensimJAMJNI.COMAKInverseKinematicsTool_upd_ik_constraint_weight__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_ik_constraint_weight(int i, double value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_ik_constraint_weight__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_ik_constraint_weight(double value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_ik_constraint_weight(swigCPtr, this, value);
  }

  public void constructProperty_ik_constraint_weight(double initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_ik_constraint_weight(swigCPtr, this, initValue);
  }

  public double get_ik_constraint_weight() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_ik_constraint_weight__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_ik_constraint_weight() {
    return new SWIGTYPE_p_double(opensimJAMJNI.COMAKInverseKinematicsTool_upd_ik_constraint_weight__SWIG_1(swigCPtr, this), false);
  }

  public void set_ik_constraint_weight(double value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_ik_constraint_weight__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_ik_accuracy(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_ik_accuracy(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public double get_ik_accuracy(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_ik_accuracy__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_ik_accuracy(int i) {
    return new SWIGTYPE_p_double(opensimJAMJNI.COMAKInverseKinematicsTool_upd_ik_accuracy__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_ik_accuracy(int i, double value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_ik_accuracy__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_ik_accuracy(double value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_ik_accuracy(swigCPtr, this, value);
  }

  public void constructProperty_ik_accuracy(double initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_ik_accuracy(swigCPtr, this, initValue);
  }

  public double get_ik_accuracy() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_ik_accuracy__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_ik_accuracy() {
    return new SWIGTYPE_p_double(opensimJAMJNI.COMAKInverseKinematicsTool_upd_ik_accuracy__SWIG_1(swigCPtr, this), false);
  }

  public void set_ik_accuracy(double value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_ik_accuracy__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_IKTaskSet(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_IKTaskSet(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public IKTaskSet get_IKTaskSet(int i) {
    return new IKTaskSet(opensimJAMJNI.COMAKInverseKinematicsTool_get_IKTaskSet__SWIG_0(swigCPtr, this, i), false);
  }

  public IKTaskSet upd_IKTaskSet(int i) {
    return new IKTaskSet(opensimJAMJNI.COMAKInverseKinematicsTool_upd_IKTaskSet__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_IKTaskSet(int i, IKTaskSet value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_IKTaskSet__SWIG_0(swigCPtr, this, i, IKTaskSet.getCPtr(value), value);
  }

  public int append_IKTaskSet(IKTaskSet value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_IKTaskSet(swigCPtr, this, IKTaskSet.getCPtr(value), value);
  }

  public void constructProperty_IKTaskSet(IKTaskSet initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_IKTaskSet(swigCPtr, this, IKTaskSet.getCPtr(initValue), initValue);
  }

  public IKTaskSet get_IKTaskSet() {
    return new IKTaskSet(opensimJAMJNI.COMAKInverseKinematicsTool_get_IKTaskSet__SWIG_1(swigCPtr, this), false);
  }

  public IKTaskSet upd_IKTaskSet() {
    return new IKTaskSet(opensimJAMJNI.COMAKInverseKinematicsTool_upd_IKTaskSet__SWIG_1(swigCPtr, this), false);
  }

  public void set_IKTaskSet(IKTaskSet value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_IKTaskSet__SWIG_1(swigCPtr, this, IKTaskSet.getCPtr(value), value);
  }

  public void copyProperty_use_visualizer(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_use_visualizer(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public boolean get_use_visualizer(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_use_visualizer__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_use_visualizer(int i) {
    return new SWIGTYPE_p_bool(opensimJAMJNI.COMAKInverseKinematicsTool_upd_use_visualizer__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_use_visualizer(int i, boolean value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_use_visualizer__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_use_visualizer(boolean value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_use_visualizer(swigCPtr, this, value);
  }

  public void constructProperty_use_visualizer(boolean initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_use_visualizer(swigCPtr, this, initValue);
  }

  public boolean get_use_visualizer() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_use_visualizer__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_use_visualizer() {
    return new SWIGTYPE_p_bool(opensimJAMJNI.COMAKInverseKinematicsTool_upd_use_visualizer__SWIG_1(swigCPtr, this), false);
  }

  public void set_use_visualizer(boolean value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_use_visualizer__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_verbose(COMAKInverseKinematicsTool source) {
    opensimJAMJNI.COMAKInverseKinematicsTool_copyProperty_verbose(swigCPtr, this, COMAKInverseKinematicsTool.getCPtr(source), source);
  }

  public int get_verbose(int i) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_verbose__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_int upd_verbose(int i) {
    return new SWIGTYPE_p_int(opensimJAMJNI.COMAKInverseKinematicsTool_upd_verbose__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_verbose(int i, int value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_verbose__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_verbose(int value) {
    return opensimJAMJNI.COMAKInverseKinematicsTool_append_verbose(swigCPtr, this, value);
  }

  public void constructProperty_verbose(int initValue) {
    opensimJAMJNI.COMAKInverseKinematicsTool_constructProperty_verbose(swigCPtr, this, initValue);
  }

  public int get_verbose() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_get_verbose__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_int upd_verbose() {
    return new SWIGTYPE_p_int(opensimJAMJNI.COMAKInverseKinematicsTool_upd_verbose__SWIG_1(swigCPtr, this), false);
  }

  public void set_verbose(int value) {
    opensimJAMJNI.COMAKInverseKinematicsTool_set_verbose__SWIG_1(swigCPtr, this, value);
  }

  /**
   * Default constructor.
   */
  public COMAKInverseKinematicsTool() {
    this(opensimJAMJNI.new_COMAKInverseKinematicsTool__SWIG_0(), true);
  }

  public COMAKInverseKinematicsTool(String file) {
    this(opensimJAMJNI.new_COMAKInverseKinematicsTool__SWIG_1(file), true);
  }

  public boolean initialize() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_initialize(swigCPtr, this);
  }

  public boolean run() {
    return opensimJAMJNI.COMAKInverseKinematicsTool_run(swigCPtr, this);
  }

  public void setModel(Model model) {
    opensimJAMJNI.COMAKInverseKinematicsTool_setModel(swigCPtr, this, Model.getCPtr(model), model);
  }

  public void performIKSecondaryConstraintSimulation() {
    opensimJAMJNI.COMAKInverseKinematicsTool_performIKSecondaryConstraintSimulation(swigCPtr, this);
  }

  public void performIK() {
    opensimJAMJNI.COMAKInverseKinematicsTool_performIK(swigCPtr, this);
  }

  public void runInverseKinematics(Model model) {
    opensimJAMJNI.COMAKInverseKinematicsTool_runInverseKinematics(swigCPtr, this, Model.getCPtr(model), model);
  }

  public void populateReferences(Model model, MarkersReference markersReference, SimTKArrayCoordinateReference coordinateReferences) {
    opensimJAMJNI.COMAKInverseKinematicsTool_populateReferences(swigCPtr, this, Model.getCPtr(model), model, MarkersReference.getCPtr(markersReference), markersReference, SimTKArrayCoordinateReference.getCPtr(coordinateReferences), coordinateReferences);
  }

  public void set_model(Model value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__model_set(swigCPtr, this, Model.getCPtr(value), value);
  }

  public Model get_model() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__model_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Model(cPtr, false);
  }

  public void set_model_exists(boolean value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__model_exists_set(swigCPtr, this, value);
  }

  public boolean get_model_exists() {
    return opensimJAMJNI.COMAKInverseKinematicsTool__model_exists_get(swigCPtr, this);
  }

  public void set_state(State value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__state_set(swigCPtr, this, State.getCPtr(value), value);
  }

  public State get_state() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__state_get(swigCPtr, this);
    return (cPtr == 0) ? null : new State(cPtr, false);
  }

  public void set_n_prescribed_coord(int value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__n_prescribed_coord_set(swigCPtr, this, value);
  }

  public int get_n_prescribed_coord() {
    return opensimJAMJNI.COMAKInverseKinematicsTool__n_prescribed_coord_get(swigCPtr, this);
  }

  public void set_n_primary_coord(int value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__n_primary_coord_set(swigCPtr, this, value);
  }

  public int get_n_primary_coord() {
    return opensimJAMJNI.COMAKInverseKinematicsTool__n_primary_coord_get(swigCPtr, this);
  }

  public void set_n_secondary_coord(int value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__n_secondary_coord_set(swigCPtr, this, value);
  }

  public int get_n_secondary_coord() {
    return opensimJAMJNI.COMAKInverseKinematicsTool__n_secondary_coord_get(swigCPtr, this);
  }

  public void set_n_muscles(int value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__n_muscles_set(swigCPtr, this, value);
  }

  public int get_n_muscles() {
    return opensimJAMJNI.COMAKInverseKinematicsTool__n_muscles_get(swigCPtr, this);
  }

  public void set_n_reserve_actuators(int value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__n_reserve_actuators_set(swigCPtr, this, value);
  }

  public int get_n_reserve_actuators() {
    return opensimJAMJNI.COMAKInverseKinematicsTool__n_reserve_actuators_get(swigCPtr, this);
  }

  public void set_n_actuators(int value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__n_actuators_set(swigCPtr, this, value);
  }

  public int get_n_actuators() {
    return opensimJAMJNI.COMAKInverseKinematicsTool__n_actuators_get(swigCPtr, this);
  }

  public void set_n_parameters(int value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__n_parameters_set(swigCPtr, this, value);
  }

  public int get_n_parameters() {
    return opensimJAMJNI.COMAKInverseKinematicsTool__n_parameters_get(swigCPtr, this);
  }

  public void set_parameter_names(ArrayStr value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__parameter_names_set(swigCPtr, this, ArrayStr.getCPtr(value), value);
  }

  public ArrayStr get_parameter_names() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__parameter_names_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ArrayStr(cPtr, false);
  }

  public void set_prescribed_coord_name(ArrayStr value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__prescribed_coord_name_set(swigCPtr, this, ArrayStr.getCPtr(value), value);
  }

  public ArrayStr get_prescribed_coord_name() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__prescribed_coord_name_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ArrayStr(cPtr, false);
  }

  public void set_prescribed_coord_path(ArrayStr value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__prescribed_coord_path_set(swigCPtr, this, ArrayStr.getCPtr(value), value);
  }

  public ArrayStr get_prescribed_coord_path() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__prescribed_coord_path_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ArrayStr(cPtr, false);
  }

  public void set_prescribed_coord_index(ArrayInt value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__prescribed_coord_index_set(swigCPtr, this, ArrayInt.getCPtr(value), value);
  }

  public ArrayInt get_prescribed_coord_index() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__prescribed_coord_index_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ArrayInt(cPtr, false);
  }

  public void set_primary_coord_name(ArrayStr value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__primary_coord_name_set(swigCPtr, this, ArrayStr.getCPtr(value), value);
  }

  public ArrayStr get_primary_coord_name() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__primary_coord_name_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ArrayStr(cPtr, false);
  }

  public void set_primary_coord_path(ArrayStr value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__primary_coord_path_set(swigCPtr, this, ArrayStr.getCPtr(value), value);
  }

  public ArrayStr get_primary_coord_path() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__primary_coord_path_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ArrayStr(cPtr, false);
  }

  public void set_primary_coord_index(ArrayInt value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__primary_coord_index_set(swigCPtr, this, ArrayInt.getCPtr(value), value);
  }

  public ArrayInt get_primary_coord_index() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__primary_coord_index_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ArrayInt(cPtr, false);
  }

  public void set_secondary_coord_name(ArrayStr value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__secondary_coord_name_set(swigCPtr, this, ArrayStr.getCPtr(value), value);
  }

  public ArrayStr get_secondary_coord_name() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__secondary_coord_name_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ArrayStr(cPtr, false);
  }

  public void set_secondary_coord_path(ArrayStr value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__secondary_coord_path_set(swigCPtr, this, ArrayStr.getCPtr(value), value);
  }

  public ArrayStr get_secondary_coord_path() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__secondary_coord_path_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ArrayStr(cPtr, false);
  }

  public void set_secondary_coord_index(ArrayInt value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__secondary_coord_index_set(swigCPtr, this, ArrayInt.getCPtr(value), value);
  }

  public ArrayInt get_secondary_coord_index() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__secondary_coord_index_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ArrayInt(cPtr, false);
  }

  public void set_n_frames(int value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__n_frames_set(swigCPtr, this, value);
  }

  public int get_n_frames() {
    return opensimJAMJNI.COMAKInverseKinematicsTool__n_frames_get(swigCPtr, this);
  }

  public void set_n_out_frames(int value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__n_out_frames_set(swigCPtr, this, value);
  }

  public int get_n_out_frames() {
    return opensimJAMJNI.COMAKInverseKinematicsTool__n_out_frames_get(swigCPtr, this);
  }

  public void set_start_frame(int value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__start_frame_set(swigCPtr, this, value);
  }

  public int get_start_frame() {
    return opensimJAMJNI.COMAKInverseKinematicsTool__start_frame_get(swigCPtr, this);
  }

  public void set_time(ArrayDouble value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__time_set(swigCPtr, this, ArrayDouble.getCPtr(value), value);
  }

  public ArrayDouble get_time() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__time_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ArrayDouble(cPtr, false);
  }

  public void set_dt(double value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__dt_set(swigCPtr, this, value);
  }

  public double get_dt() {
    return opensimJAMJNI.COMAKInverseKinematicsTool__dt_get(swigCPtr, this);
  }

  public void set_consecutive_bad_frame(int value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__consecutive_bad_frame_set(swigCPtr, this, value);
  }

  public int get_consecutive_bad_frame() {
    return opensimJAMJNI.COMAKInverseKinematicsTool__consecutive_bad_frame_get(swigCPtr, this);
  }

  public void set_bad_frames(StdVectorInt value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__bad_frames_set(swigCPtr, this, StdVectorInt.getCPtr(value), value);
  }

  public StdVectorInt get_bad_frames() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__bad_frames_get(swigCPtr, this);
    return (cPtr == 0) ? null : new StdVectorInt(cPtr, false);
  }

  public void set_bad_times(StdVectorDouble value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__bad_times_set(swigCPtr, this, StdVectorDouble.getCPtr(value), value);
  }

  public StdVectorDouble get_bad_times() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__bad_times_get(swigCPtr, this);
    return (cPtr == 0) ? null : new StdVectorDouble(cPtr, false);
  }

  public void set_bad_udot_errors(StdVectorDouble value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__bad_udot_errors_set(swigCPtr, this, StdVectorDouble.getCPtr(value), value);
  }

  public StdVectorDouble get_bad_udot_errors() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__bad_udot_errors_get(swigCPtr, this);
    return (cPtr == 0) ? null : new StdVectorDouble(cPtr, false);
  }

  public void set_bad_udot_coord(StdVectorString value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__bad_udot_coord_set(swigCPtr, this, StdVectorString.getCPtr(value), value);
  }

  public StdVectorString get_bad_udot_coord() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__bad_udot_coord_get(swigCPtr, this);
    return (cPtr == 0) ? null : new StdVectorString(cPtr, false);
  }

  public void set_q_matrix(Matrix value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__q_matrix_set(swigCPtr, this, Matrix.getCPtr(value), value);
  }

  public Matrix get_q_matrix() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__q_matrix_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public void set_u_matrix(Matrix value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__u_matrix_set(swigCPtr, this, Matrix.getCPtr(value), value);
  }

  public Matrix get_u_matrix() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__u_matrix_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public void set_udot_matrix(Matrix value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__udot_matrix_set(swigCPtr, this, Matrix.getCPtr(value), value);
  }

  public Matrix get_udot_matrix() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__udot_matrix_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public void set_secondary_coord_damping(Vector value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__secondary_coord_damping_set(swigCPtr, this, Vector.getCPtr(value), value);
  }

  public Vector get_secondary_coord_damping() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__secondary_coord_damping_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Vector(cPtr, false);
  }

  public void set_optimal_force(Vector value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__optimal_force_set(swigCPtr, this, Vector.getCPtr(value), value);
  }

  public Vector get_optimal_force() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__optimal_force_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Vector(cPtr, false);
  }

  public void set_prev_secondary_value(Vector value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__prev_secondary_value_set(swigCPtr, this, Vector.getCPtr(value), value);
  }

  public Vector get_prev_secondary_value() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__prev_secondary_value_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Vector(cPtr, false);
  }

  public void set_prev_parameters(Vector value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__prev_parameters_set(swigCPtr, this, Vector.getCPtr(value), value);
  }

  public Vector get_prev_parameters() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__prev_parameters_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Vector(cPtr, false);
  }

  public void set_parameter_scale(Vector value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__parameter_scale_set(swigCPtr, this, Vector.getCPtr(value), value);
  }

  public Vector get_parameter_scale() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__parameter_scale_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Vector(cPtr, false);
  }

  public void set_muscle_volumes(Vector value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__muscle_volumes_set(swigCPtr, this, Vector.getCPtr(value), value);
  }

  public Vector get_muscle_volumes() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__muscle_volumes_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Vector(cPtr, false);
  }

  public void set_secondary_constraint_functions(FunctionSet value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__secondary_constraint_functions_set(swigCPtr, this, FunctionSet.getCPtr(value), value);
  }

  public FunctionSet get_secondary_constraint_functions() {
    long cPtr = opensimJAMJNI.COMAKInverseKinematicsTool__secondary_constraint_functions_get(swigCPtr, this);
    return (cPtr == 0) ? null : new FunctionSet(cPtr, false);
  }

  public void set_directoryOfSetupFile(String value) {
    opensimJAMJNI.COMAKInverseKinematicsTool__directoryOfSetupFile_set(swigCPtr, this, value);
  }

  public String get_directoryOfSetupFile() {
    return opensimJAMJNI.COMAKInverseKinematicsTool__directoryOfSetupFile_get(swigCPtr, this);
  }

}
